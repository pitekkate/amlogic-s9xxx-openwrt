#!/bin/bash
#================================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Remake OpenWrt
# https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Description: Automatically Packaged OpenWrt
# Copyright (C) 2020~ https://github.com/openwrt/openwrt
# Copyright (C) 2020~ https://github.com/coolsnowwolf/lede
# Copyright (C) 2020~ https://github.com/immortalwrt/immortalwrt
# Copyright (C) 2020~ https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021~ https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/CONTRIBUTORS.md
# Copyright (C) 2020~ https://github.com/ophub/amlogic-s9xxx-openwrt
#
# Command: sudo ./remake
# Command optional parameters please refer to the source code repository
#
#======================================== Functions list ========================================
#
# error_msg          : Output error message
# process_msg        : Output process message
# mount_try          : Mount the image file, fail again
# get_textoffset     : Get kernel TEXT_OFFSET
#
# init_var           : Initialize all variables
# check_data         : Check the validity of the data
# find_openwrt       : Find OpenWrt file (openwrt-armsr/*rootfs.tar.gz)
# git_pull_dir       : Download the files from the git repository
# download_depends   : Download the dependency files
# query_kernel       : Query the latest kernel version
# check_kernel       : Check kernel files integrity
# download_kernel    : Download the latest kernel
#
# confirm_version    : Confirm version type
# make_image         : Making OpenWrt file
# extract_openwrt    : Extract OpenWrt files
# replace_kernel     : Replace the kernel
# refactor_bootfs    : Refactor bootfs files
# refactor_rootfs    : Refactor rootfs files
# clean_tmp          : Clear temporary files
#
# loop_make          : Loop to make OpenWrt files
#
#================================ Set make environment variables ================================
#
# Related file storage path
current_path="${PWD}"
make_path="${current_path}/openwrt"
tmp_path="${make_path}/tmp"
out_path="${make_path}/out"
openwrt_path="${current_path}/openwrt-armsr"
openwrt_rootfs_file="*rootfs.tar.gz"
resource_path="${current_path}/make-openwrt"
kernel_path="${resource_path}/kernel"
uboot_path="${resource_path}/u-boot"
common_files="${resource_path}/openwrt-files/common-files"
platform_files="${resource_path}/openwrt-files/platform-files"
different_files="${resource_path}/openwrt-files/different-files"
firmware_path="${common_files}/lib/firmware"
model_conf="${common_files}/etc/model_database.conf"
model_txt="${common_files}/etc/model_database.txt"
[[ -d "${make_path}" ]] || mkdir -p ${make_path}

# System operation environment
arch_info="$(uname -m)"
host_release="$(cat /etc/os-release | grep '^VERSION_CODENAME=.*' | cut -d'=' -f2)"
# Add custom OpenWrt firmware information
op_release="etc/flippy-openwrt-release"
ophub_release_file="etc/ophub-release"

# Dependency files download repository
depends_repo="https://github.com/ophub/amlogic-s9xxx-armbian"
# U-BOOT files download repository
uboot_repo="https://github.com/ophub/u-boot"
# Firmware files download repository
firmware_repo="https://github.com/ophub/firmware"
# Install/Update script files download repository
script_repo="https://github.com/ophub/luci-app-amlogic"

# Set the kernel download repository from github.com
kernel_repo="https://github.com/ophub/kernel"
# Set the tags(kernel_xxx) of the default kernel that can be replaced via the [ -u ] parameter
default_tags="stable"
kernel_usage=""
# Set the list of kernels used by default(Selectable version)
stable_kernel=("5.15.y" "6.1.y")
flippy_kernel=(${stable_kernel[@]})
dev_kernel=(${stable_kernel[@]})
beta_kernel=(${stable_kernel[@]})
rk3588_kernel=("5.10.y")
rk35xx_kernel=("5.10.y")
rk322x_kernel=("5.15.y" "6.1.y")  # <-- DITAMBAHKAN KERNEL UNTUK RK322x
h6_kernel=("6.6.y")
specific_6xy=("6.1.y" "6.6.y" "6.12.y")
specific_5xy=("5.4.y" "5.10.y" "5.15.y")
# Set to automatically use the latest kernel
auto_kernel="true"
# Initialize the kernel array
declare -A tags_list

# Set the Amlogic's u-boot series(u-boot-xxx.bin)
uboot_meson_gxl=("p201.bin" "p212.bin" "s905x-s912.bin" "n1.bin" "r3300l.bin")
uboot_meson_gxm=("p212.bin" "s905x-s912.bin" "zyxq.bin")
uboot_meson_g12a=("x96max.bin" "e900v22c.bin")
uboot_meson_g12b=("gtking.bin" "gtkingpro.bin" "gtkingpro-rev-a.bin" "s905x2-s922.bin")
uboot_meson_sm1=("x96maxplus.bin" "ugoos-x3.bin" "tx3-qz.bin" "tx3-bz.bin" "skyworth-lb2004.bin")
uboot_meson_gxbb=("p201.bin" "s905.bin")
uboot_rockchip_rk322x=("rk322x_box.bin")  # <-- DITAMBAHKAN U-BOOT UNTUK RK322x

# Initialize the build device
make_board="all"

# Set OpenWrt firmware size (Unit: MiB, boot_mb >= 256, root_mb >= 512)
boot_mb="256"
root_mb="1024"
# Set OpenWrt builder signature
builder_name=""

# Set font color
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
NOTE="[\033[93m NOTE \033[0m]"
WARNING="[\033[93m WARNING \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#================================================================================================

error_msg() {
    echo -e " [ðŸ’”] ${1}"
    exit 1
}

process_msg() {
    echo -e " [ðŸŒ¿] ${1}"
}

mount_try() {
    # Check mount parameters
    m_type="${1}"
    m_dev="${2}"
    m_target="${3}"
    [[ -n "${m_type}" && -n "${m_dev}" && -n "${m_target}" ]] || {
        error_msg "Mount parameter is missing: [ ${m_type}, ${m_dev}, ${m_target} ]"
    }

    t="1"
    max_try="10"
    while [[ "${t}" -le "${max_try}" ]]; do
        # Mount according to the image partition format
        if [[ "${m_type}" == "btrfs" ]]; then
            mount -t ${m_type} -o discard,compress=zstd:6 ${m_dev} ${m_target}
        else
            mount -t ${m_type} -o discard ${m_dev} ${m_target}
        fi

        # Mount failed and continue trying
        if [[ "${?}" -eq 0 ]]; then
            break
        else
            sync && sleep 3
            umount -f ${m_target} 2>/dev/null
            t="$((t + 1))"
        fi
    done
    [[ "${t}" -gt "${max_try}" ]] && error_msg "[ ${t} ] attempts to mount failed."
}

get_textoffset() {
    vmlinuz_name="${1}"
    need_overload="yes"
    # With TEXT_OFFSET patch is [ 0108 ], without TEXT_OFFSET patch is [ 0000 ]
    [[ "$(hexdump -n 15 -x "${vmlinuz_name}" 2>/dev/null | head -n 1 | awk '{print $7}')" == "0108" ]] && need_overload="no"
}

init_var() {
    echo -e "${STEPS} Start Initializing Variables..."

    # If it is followed by [ : ], it means that the option requires a parameter value
    local options="b:r:u:k:a:s:n:"
    parsed_args=$(getopt -o "${options}" -- "${@}")
    [[ ${?} -ne 0 ]] && error_msg "Parameter parsing failed."
    eval set -- "${parsed_args}"

    while true; do
        case "${1}" in
        -b | --Board)
            if [[ -n "${2}" ]]; then
                make_board="${2// /}"
                shift 2
            else
                error_msg "Invalid -b parameter [ ${2} ]!"
            fi
            ;;
        -r | --kernelRepository)
            if [[ -n "${2}" ]]; then
                kernel_repo="${2}"
                shift 2
            else
                error_msg "Invalid -r parameter [ ${2} ]!"
            fi
            ;;
        -u | --kernelUsage)
            if [[ -n "${2}" ]]; then
                kernel_usage="${2//kernel_/}"
                shift 2
            else
                error_msg "Invalid -u parameter [ ${2} ]!"
            fi
            ;;
        -k | --Kernel)
            if [[ -n "${2}" ]]; then
                oldIFS="${IFS}"
                IFS="_"
                flippy_kernel=(${2})
                stable_kernel=(${2})
                dev_kernel=(${2})
                beta_kernel=(${2})
                specific_kernel=(${2})
                IFS="${oldIFS}"
                shift 2
            else
                error_msg "Invalid -k parameter [ ${2} ]!"
            fi
            ;;
        -a | --Autokernel)
            if [[ -n "${2}" ]]; then
                auto_kernel="${2}"
                shift 2
            else
                error_msg "Invalid -a parameter [ ${2} ]!"
            fi
            ;;
        -s | --Size)
            if [[ -n "${2}" ]]; then
                img_mb="${2}"
                shift 2
            else
                error_msg "Invalid -s parameter [ ${2} ]!"
            fi
            ;;
        -n | --BuilderName)
            if [[ -n "${2}" ]]; then
                builder_name="${2// /}"
                shift 2
            else
                error_msg "Invalid -n parameter [ ${2} ]!"
            fi
            ;;
        --)
            shift
            break
            ;;
        *)
            [[ -n "${1}" ]] && error_msg "Invalid option [ ${1} ]!"
            break
            ;;
        esac
    done

    # Set the image size, such as [ -s 512/2560 ] or [ -s 2560 ]
    [[ -n "${img_mb}" ]] && {
        if [[ "${img_mb}" =~ / ]]; then
            boot_mb="${img_mb%%/*}"
            root_mb="${img_mb##*/}"
        else
            root_mb="${img_mb}"
        fi
    }
}

check_data() {
    # Columns of ${model_conf}:
    # 1.ID  2.MODEL  3.SOC  4.FDTFILE  5.UBOOT_OVERLOAD  6.MAINLINE_UBOOT  7.BOOTLOADER_IMG  8.DESCRIPTION
    # 9.KERNEL_TAGS  10.PLATFORM  11.FAMILY  12.BOOT_CONF  13.CONTRIBUTORS  14.BOARD  15.BUILD
    [[ -f "${model_conf}" ]] || error_msg "Missing model config file: [ ${model_conf} ]"

    # Convert ${model_conf} to ${model_txt} for [ openwrt-install-amlogic ], Just the first 8 columns.
    cat ${model_conf} |
        sed -e 's/NULL/NA/g' -e 's/[ ][ ]*//g' |
        grep -E "^[^#ar].*" |
        awk -F':' '{if ($6 != "NA") $6 = "/lib/u-boot/"$6; if ($7 != "NA") $7 = "/lib/u-boot/"$7; NF = 12; print}' OFS=':' \
            >${model_txt}

    # Get a list of build devices
    if [[ "${make_board}" == "all" ]]; then
        board_list=":(yes)"
        make_openwrt=($(
            cat ${model_conf} |
                sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g' |
                grep -E "^[^#].*:yes$" | awk -F':' '{print $14}' |
                sort -u | xargs
        ))
    else
        board_list=":($(echo ${make_board} | sed -e 's/_/\|/g')):(yes|no)"
        make_openwrt=($(echo ${make_board} | sed -e 's/_/ /g'))
    fi
    [[ "${#make_openwrt[@]}" -eq 0 ]] && error_msg "The board is missing, stop making."

    # Get the kernel array
    kernel_from=($(
        cat ${model_conf} |
            sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g' |
            grep -E "^[^#].*${board_list}$" | awk -F':' '{print $9}' |
            sort -u | xargs
    ))
    [[ "${#kernel_from[@]}" -eq 0 ]] && error_msg "Missing [ KERNEL_TAGS ] settings, stop building."
    # Replace custom kernel tags
    [[ -n "${kernel_usage}" ]] && {
        for ((i = 0; i < ${#kernel_from[@]}; i++)); do
            if [[ ${kernel_from[${i}]} == "${default_tags}/"* ]]; then
                kernel_from[${i}]="${kernel_from[${i}]//${default_tags}/${kernel_usage}}"
            fi
        done
    }

    # Convert the kernel_from to the kernel array
    for item in "${kernel_from[@]}"; do
        # Split the key and value
        IFS='/' read -r key value <<<"${item}"

        # Check if the value is "all".
        if [[ "${value}" == "all" ]]; then
            # If the value is "all", assign the value of ${key}_kernel. such as [ stable_kernel, rk3588_kernel, etc. ]
            eval "value=\"\${${key}_kernel[@]}\""
        elif [[ "${value}" =~ ^[1-9]+ ]]; then
            if [[ "${value}" == "5.x.y" ]]; then
                value="${specific_5xy[@]}"
            elif [[ "${value}" == "6.x.y" ]]; then
                value="${specific_6xy[@]}"
            else
                IFS='_' read -ra value <<<"${value}"
                value="${value[@]}"
            fi
        fi

        # Jika auto_kernel false, gunakan nilai dari parameter -k
        if [[ "${auto_kernel}" != "true" ]]; then
            if [[ "${#specific_kernel[@]}" -eq 0 ]]; then
                error_msg "Plase use the -k parameter to specify the kernel version."
            else
                value="${specific_kernel[@]}"
            fi
        else
            # Perluasan khusus untuk RK322x
            if [[ "${key}" == "rk322x" ]]; then
                value="${rk322x_kernel[@]}"
            fi
        fi

        # Merge the same key values
        if [[ -n "${tags_list[${key}]}" ]]; then
            tags_list[${key}]+=" ${value}"
        else
            tags_list[${key}]="${value}"
        fi
    done

    # Convert the tags_list array to the kernel array (remove duplicates)
    for key in "${!tags_list[@]}"; do
        # Convert the space-separated string to an array and remove duplicates
        read -ra unique_values <<<"$(echo "${tags_list[${key}]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
        # Assign the unique values back to the tags_list
        tags_list[${key}]="${unique_values[@]}"
    done

    # Check the kernel tags list
    [[ "${#tags_list[@]}" -eq 0 ]] && error_msg "The [ tags_list ] is missing, stop building."
    echo -e "${INFO} The kernel tags list: [ ${!tags_list[@]} ]"

    # Convert kernel repository address to api format
    [[ "${kernel_repo}" =~ ^https: ]] && kernel_repo="$(echo ${kernel_repo} | awk -F'/' '{print $4"/"$5}')"
    kernel_api="https://github.com/${kernel_repo}"
}

find_openwrt() {
    cd ${current_path}
    echo -e "${STEPS} Start searching for OpenWrt file..."

    # Find whether the OpenWrt file exists
    openwrt_default_file="$(ls ${openwrt_path}/${openwrt_rootfs_file} 2>/dev/null | head -n 1 | awk -F "/" '{print $NF}')"
    if [[ -n "${openwrt_default_file}" ]]; then
        echo -e "${INFO} OpenWrt file: [ ${openwrt_default_file} ]"
    else
        error_msg "There is no [ ${openwrt_rootfs_file} ] file in the [ ${openwrt_path} ] directory."
    fi

    # Extract the OpenWrt release information file
    source_codename=""
    source_release_file="etc/openwrt_release"
    temp_dir="$(mktemp -d)"
    (cd ${temp_dir} && tar -mxzf "${openwrt_path}/${openwrt_default_file}" "./${source_release_file}" 2>/dev/null)
    # Find custom DISTRIB_SOURCECODE, such as [ official/lede ]
    [[ -f "${temp_dir}/${source_release_file}" ]] && {
        source_codename="$(cat ${temp_dir}/${source_release_file} 2>/dev/null | grep -oE "^DISTRIB_SOURCECODE=.*" | head -n 1 | cut -d"'" -f2)"
        [[ -n "${source_codename}" ]] && {
            # Record OpenWrt source codes repository
            case "${source_codename}" in
            official) OPENWRT_SOURCECODE="github.com/openwrt/openwrt" ;;
            lede) OPENWRT_SOURCECODE="github.com/coolsnowwolf/lede" ;;
            immortalwrt) OPENWRT_SOURCECODE="github.com/immortalwrt/immortalwrt" ;;
            *) OPENWRT_SOURCECODE="unknown" ;;
            esac

            # Complete filename
            [[ "${source_codename:0:1}" != "_" ]] && source_codename="_${source_codename}"
        }
        echo -e "${INFO} The source_codename: [ ${source_codename} ], OpenWrt source code repository: [ ${OPENWRT_SOURCECODE} ]"
    }
    # Remove temporary directory
    rm -rf ${temp_dir}
}

git_pull_dir() {
    cd ${current_path}

    # Check git_pull_dir parameters
    git_repo="${1}"
    git_branch="${2}"
    git_path="${3}"
    [[ -n "${git_repo}" && -n "${git_branch}" && -n "${git_path}" ]] || {
        error_msg "git_pull_dir parameter is missing: [ ${git_repo}, ${git_branch}, ${git_path} ]"
    }

    # Clone the repository to the temporary directory. If it fails, wait 1 minute and try again, try 10 times.
    for i in {1..10}; do
        git clone --quiet --single-branch --depth=1 --branch=${git_branch} ${git_repo} ${git_path}
        [[ "${?}" -eq 0 ]] && break || sleep 60
    done
    [[ "${?}" -eq 0 ]] || error_msg "Failed to clone the [ ${git_repo} ] repository."
}

download_depends() {
    cd ${current_path}
    echo -e "${STEPS} Start downloading dependency files..."

    # Download Armbian u-boot files
    git_path="$(mktemp -d)"
    git_pull_dir ${uboot_repo} main ${git_path}
    # Move the files to the storage directory
    mkdir -p ${uboot_path}
    cp -af --no-preserve=ownership ${git_path}/u-boot/* ${uboot_path}
    [[ "${?}" -eq 0 ]] || error_msg "Failed to move the [ u-boot ] files to the [ ${uboot_path} ] directory."
    # Delete temporary files
    rm -rf ${git_path}

    # Download Armbian firmware files
    git_path="$(mktemp -d)"
    git_pull_dir ${firmware_repo} main ${git_path}
    # Move the files to the storage directory
    mkdir -p ${firmware_path}
    cp -af --no-preserve=ownership ${git_path}/firmware/* ${firmware_path}
    [[ "${?}" -eq 0 ]] && echo -e "${INFO} firmware download completed." || error_msg "firmware download failed."
    # Delete temporary files
    rm -rf ${git_path}

    # Download platform files
    git_path="$(mktemp -d)"
    git_pull_dir ${depends_repo} main ${git_path}
    # Move the files to the storage directory
    cp -af --no-preserve=ownership ${git_path}/build-armbian/armbian-files/platform-files/* ${platform_files}
    # Remove the special files in the [ sbin ] directory of the Armbian system
    rm -rf $(find ${platform_files} -type d -name "sbin")
    # Download different files
    cp -af --no-preserve=ownership ${git_path}/build-armbian/armbian-files/different-files/* ${different_files}
    [[ "${?}" -eq 0 ]] && echo -e "${INFO} different-files download completed." || error_msg "different-files download failed."
    # Download balethirq related files
    cp -f --no-preserve=ownership ${git_path}/build-armbian/armbian-files/common-files/usr/sbin/balethirq.pl ${common_files}/usr/sbin
    cp -f --no-preserve=ownership ${git_path}/build-armbian/armbian-files/common-files/etc/balance_irq ${common_files}/etc
    [[ "${?}" -eq 0 ]] && echo -e "${INFO} balethirq download completed." || error_msg "balethirq download failed."
    # Delete temporary files
    rm -rf ${git_path}

    # Download install/update and other related files
    git_path="$(mktemp -d)"
    git_pull_dir ${script_repo} main ${git_path}
    # Move the files to the storage directory
    cp -af --no-preserve=ownership ${git_path}/luci-app-amlogic/root/usr/sbin/* ${common_files}/usr/sbin
    [[ "${?}" -eq 0 ]] && echo -e "${INFO} app/sbin download completed." || error_msg "app/sbin download failed."
    chmod +x ${common_files}/usr/sbin/*
    # Move the files to the storage directory
    mkdir -p ${common_files}/usr/share/amlogic
    cp -af --no-preserve=ownership ${git_path}/luci-app-amlogic/root/usr/share/amlogic ${common_files}/usr/share/amlogic
    [[ "${?}" -eq 0 ]] && echo -e "${INFO} app/share download completed." || error_msg "app/share download failed."
    chmod +x ${common_files}/usr/share/amlogic/*
    # Delete temporary files
    rm -rf ${git_path}
}

query_kernel() {
    echo -e "${STEPS} Start querying the latest kernel version..."

    # Check the version on the kernel repository
    x="1"
    for key in "${!tags_list[@]}"; do
        {
            # Query the name of the latest kernel version
            tmp_arr_kernels=()
            down_kernel_list=(${tags_list[${key}]})
            i=1
            for kernel_var in "${down_kernel_list[@]}"; do
                echo -e "${INFO} (${x}.${i}) Auto query the latest kernel version for [ ${key} - ${kernel_var} ]"

                # Identify the kernel <VERSION> and <PATCHLEVEL>, such as [ 6.1 ]
                kernel_verpatch="$(echo ${kernel_var} | awk -F '.' '{print $1"."$2}')"

                # Query the latest kernel version
                latest_version="$(
                    curl -fsSL \
                        ${kernel_api}/releases/expanded_assets/kernel_${key} |
                        grep -oE "${kernel_verpatch}.[0-9]+.tar.gz" | sed 's/.tar.gz//' |
                        sort -urV | head -n 1
                )"

                if [[ "${?}" -eq 0 && -n "${latest_version}" ]]; then
                    tmp_arr_kernels[${i}]="${latest_version}"
                else
                    tmp_arr_kernels[${i}]="${kernel_var} "
                fi
                echo -e "${INFO} (${x}.${i}) [ ${kernel_var} ] latest version: [ ${tmp_arr_kernels[${i}]} ]"
                let i++
            done
            # Reset the kernel array
            tags_list[${key}]="${tmp_arr_kernels[*]}"
        } &
        let x++
    done
    wait
}

check_kernel() {
    echo -e "${STEPS} Start checking kernel integrity..."

    for key in "${!tags_list[@]}"; do
        {
            # Kernel storage directory
            kernel_dir="${kernel_path}/kernel_${key}"
            [[ -d "${kernel_dir}" ]] || mkdir -p ${kernel_dir}

            # Check the kernel files
            down_kernel_list=(${tags_list[${key}]})
            for kernel_var in "${down_kernel_list[@]}"; do
                # Kernel file name
                kernel_file="${kernel_dir}/${kernel_var}.tar.gz"
                # Check if the kernel file exists
                if [[ -f "${kernel_file}" ]]; then
                    # Check the file size
                    kernel_local_size="$(ls -l ${kernel_file} | awk '{print $5}')"
                    kernel_remote_size="$(
                        curl -sI ${kernel_api}/releases/download/kernel_${key}/${kernel_var}.tar.gz |
                            grep -i 'Content-Length' | awk '{print $2}' | tr -d '\r'
                    )"
                    # Check if the file size is valid
                    if [[ "${kernel_local_size}" -eq "${kernel_remote_size}" ]]; then
                        echo -e "${INFO} [ ${kernel_var} ] is valid."
                    else
                        echo -e "${INFO} [ ${kernel_var} ] is invalid and will be re-downloaded."
                        rm -f ${kernel_file}
                    fi
                fi
            done
        } &
    done
    wait
}

download_kernel() {
    echo -e "${STEPS} Start downloading the kernel..."

    for key in "${!tags_list[@]}"; do
        {
            # Kernel storage directory
            kernel_dir="${kernel_path}/kernel_${key}"
            [[ -d "${kernel_dir}" ]] || mkdir -p ${kernel_dir}

            # Download the kernel files
            down_kernel_list=(${tags_list[${key}]})
            for kernel_var in "${down_kernel_list[@]}"; do
                # Kernel file name
                kernel_file="${kernel_dir}/${kernel_var}.tar.gz"
                # Download the kernel file
                if [[ ! -f "${kernel_file}" ]]; then
                    echo -e "${INFO} Downloading [ ${kernel_var} ] ..."
                    wget -q --show-progress --progress=bar:force:noscroll \
                        ${kernel_api}/releases/download/kernel_${key}/${kernel_var}.tar.gz -O ${kernel_file}
                    [[ "${?}" -ne 0 ]] && error_msg "Failed to download the kernel file: [ ${kernel_var}.tar.gz ]"
                fi
            done
        } &
    done
    wait

    echo -e "${SUCCESS} Kernel download completed."
}

confirm_version() {
    echo -e "${STEPS} Start confirming the kernel version..."

    # Convert the kernel array
    for key in "${!tags_list[@]}"; do
        # Kernel storage directory
        kernel_dir="${kernel_path}/kernel_${key}"
        [[ -d "${kernel_dir}" ]] || mkdir -p ${kernel_dir}

        # Kernel file list
        kernel_list=($(ls ${kernel_dir}/*.tar.gz 2>/dev/null | sort -urV))
        [[ "${#kernel_list[@]}" -eq 0 ]] && error_msg "There are no kernel files in the [ ${kernel_dir} ] directory."

        # Check the kernel file integrity
        for kernel in "${kernel_list[@]}"; do
            # Check the file size
            kernel_size="$(ls -l ${kernel} | awk '{print $5}')"
            if [[ "${kernel_size}" -lt "10000000" ]]; then
                echo -e "${WARNING} [ $(basename ${kernel}) ] file size is too small and will be deleted."
                rm -f ${kernel}
                continue
            fi
            # Kernel version
            kernel_version="$(basename ${kernel} | sed -e 's/.tar.gz//')"
            # Record the kernel version
            kernel_versions+=("${kernel_version}")
        done

        # Reset the kernel array
        tags_list[${key}]="${kernel_versions[*]}"
        unset kernel_versions
    done

    echo -e "${INFO} The kernel versions list: [ ${!tags_list[@]} ]"
}

make_image() {
    echo -e "${STEPS} Start making OpenWrt files for RK322x..."

    # Create a temporary directory
    [[ -d "${tmp_path}" ]] || mkdir -p ${tmp_path}
    [[ -d "${out_path}" ]] || mkdir -p ${out_path}

    # Loop through all devices
    for board in "${make_openwrt[@]}"; do
        {
            # Set the kernel for the device
            kernel_tags=""
            for key in "${!tags_list[@]}"; do
                if [[ "${board}" == *"${key}"* ]]; then
                    kernel_tags="${tags_list[${key}]}"
                    break
                fi
            done
            [[ -z "${kernel_tags}" ]] && error_msg "The kernel tags for [ ${board} ] is missing."

            # Split kernel array
            IFS=' ' read -r -a kernel_versions <<<"${kernel_tags}"

            # Loop to make files
            for kernel in "${kernel_versions[@]}"; do
                {
                    # Set the kernel directory
                    kernel_dir="${kernel_path}/kernel_${key}"

                    # Set the kernel file
                    kernel_file="${kernel_dir}/${kernel}.tar.gz"

                    # Check kernel file
                    [[ -f "${kernel_file}" ]] || error_msg "The kernel file is missing: [ ${kernel_file} ]"

                    # Set the image name
                    openwrt_full_name="${openwrt_default_file//.tar.gz/}"
                    openwrt_full_name="${openwrt_full_name}-${board}-${kernel}${source_codename}"
                    # Set the image file name
                    image_full_name="${openwrt_full_name}-$(date +"%Y%m%d")"
                    # Set the image file path
                    image_file="${out_path}/${image_full_name}.img"

                    # Check if the image exists
                    if [[ -f "${image_file}" ]]; then
                        echo -e "${INFO} The [ ${image_full_name}.img ] already exists."
                        continue
                    fi

                    # Start making
                    echo -e "${INFO} Start making OpenWrt for [ ${board} - ${kernel} ] ..."
                    echo -e "${INFO} Image name: [ ${image_full_name}.img ]"
                    echo -e "${INFO} Kernel file: [ ${kernel_file} ]"

                    # Create a temporary directory
                    tmp_dir="$(mktemp -d)"
                    [[ -d "${tmp_dir}" ]] || error_msg "Failed to create a temporary directory."

                    # Copy the OpenWrt file to the temporary directory
                    cp -f ${openwrt_path}/${openwrt_default_file} ${tmp_dir}/openwrt.tar.gz
                    [[ "${?}" -ne 0 ]] && error_msg "Failed to copy the OpenWrt file."

                    # Copy the kernel file to the temporary directory
                    cp -f ${kernel_file} ${tmp_dir}/kernel.tar.gz
                    [[ "${?}" -ne 0 ]] && error_msg "Failed to copy the kernel file."

                    # Enter the temporary directory
                    cd ${tmp_dir}

                    # Extract OpenWrt files
                    echo -e "${INFO} Extracting OpenWrt files..."
                    tar -xzf openwrt.tar.gz
                    [[ "${?}" -ne 0 ]] && error_msg "Failed to extract OpenWrt files."

                    # Extract kernel files
                    echo -e "${INFO} Extracting kernel files..."
                    tar -xzf kernel.tar.gz --strip-components=1
                    [[ "${?}" -ne 0 ]] && error_msg "Failed to extract kernel files."

                    # Proses khusus untuk RK322x
                    if [[ "${board}" == *"rk322x"* ]]; then
                        echo -e "${INFO} Processing RK322x specific configurations..."
                        # 1. Tambahkan device tree khusus
                        cp -f "${platform_files}/dts/rk322x-box.dts" "${tmp_dir}/boot/dtb/"
                        
                        # 2. Konfigurasi boot khusus RK322x
                        sed -i 's/EXTRA_KERNEL_ARGS=""/EXTRA_KERNEL_ARGS="rockchip.usb_otg=1"/' \
                            "${tmp_dir}/${op_release}"
                        
                        # 3. Tambahkan firmware GPU jika diperlukan
                        mkdir -p "${tmp_dir}/lib/firmware/rockchip"
                        cp -rf "${firmware_path}/rockchip/gpu/"* "${tmp_dir}/lib/firmware/rockchip/"
                    fi

                    # Replace the kernel
                    echo -e "${INFO} Replacing the kernel..."
                    cp -f boot/vmlinuz* openwrt/boot/
                    cp -f boot/System.map* openwrt/boot/
                    cp -f boot/config* openwrt/boot/
                    [[ -d "boot/dtb" ]] && cp -rf boot/dtb openwrt/boot/
                    [[ -d "boot/dtb-rockchip" ]] && cp -rf boot/dtb-rockchip openwrt/boot/
                    [[ -d "boot/dtb-amlogic" ]] && cp -rf boot/dtb-amlogic openwrt/boot/
                    [[ -d "boot/dtb-allwinner" ]] && cp -rf boot/dtb-allwinner openwrt/boot/

                    # Refactor bootfs files
                    echo -e "${INFO} Refactoring bootfs files..."
                    cp -f ${common_files}/etc/flippy-openwrt-release openwrt/${op_release}
                    sed -i "s|KERNEL_VERSION=.*|KERNEL_VERSION=\"${kernel}\"|" openwrt/${op_release}
                    sed -i "s|BUILD_DATE=.*|BUILD_DATE=\"$(date +"%Y.%m.%d")\"|" openwrt/${op_release}
                    [[ -n "${builder_name}" ]] && sed -i "s|BUILDER_NAME=.*|BUILDER_NAME=\"${builder_name}\"|" openwrt/${op_release}
                    # Add ophub-release
                    echo "OPHUB_RELEASE=\"${image_full_name}\"" >openwrt/${ophub_release_file}

                    # Refactor rootfs files
                    echo -e "${INFO} Refactoring rootfs files..."
                    # Copy common files
                    cp -rf ${common_files}/* openwrt/
                    # Copy platform files
                    [[ -d "${platform_files}/${board}" ]] && cp -rf ${platform_files}/${board}/* openwrt/
                    # Copy different files
                    [[ -d "${different_files}" ]] && cp -rf ${different_files}/* openwrt/

                    # Clean temporary files
                    echo -e "${INFO} Cleaning temporary files..."
                    rm -rf openwrt.tar.gz kernel.tar.gz boot openwrt/boot/*.old

                    # Create the image file
                    echo -e "${INFO} Creating the image file..."
                    # Calculate the image size (Unit: MiB)
                    image_mb="$((boot_mb + root_mb))"
                    # Create a blank image file
                    dd if=/dev/zero of=${image_file} bs=1M count=${image_mb} status=progress
                    # Format the image file
                    mkfs.ext4 -F -L OPENWRT ${image_file}
                    # Mount the image file
                    mount_dir="${tmp_path}/mount"
                    [[ -d "${mount_dir}" ]] || mkdir -p ${mount_dir}
                    mount_try ext4 ${image_file} ${mount_dir}

                    # Copy OpenWrt files to the image
                    echo -e "${INFO} Copying OpenWrt files to the image..."
                    cp -a openwrt/* ${mount_dir}
                    # Unmount the image
                    umount -f ${mount_dir}

                    # Clean temporary directory
                    rm -rf ${tmp_dir}

                    echo -e "${SUCCESS} The [ ${image_full_name}.img ] file is successfully made."
                } &
            done
            wait
        } &
    done
    wait

    echo -e "${SUCCESS} All OpenWrt files have been successfully made."
}

clean_tmp() {
    echo -e "${STEPS} Start cleaning temporary files..."
    rm -rf ${tmp_path}
    echo -e "${SUCCESS} Temporary files cleaned."
}

loop_make() {
    echo -e "${STEPS} Start looping to make OpenWrt files..."
    init_var "${@}"
    check_data
    find_openwrt
    git_pull_dir ${depends_repo} main ${resource_path}
    download_depends
    query_kernel
    check_kernel
    download_kernel
    confirm_version
    make_image
    clean_tmp
    echo -e "${SUCCESS} The OpenWrt firmware making process is completed."
    echo -e "${INFO} The output directory: [ ${out_path} ]"
    echo -e "${INFO} The OpenWrt firmware list:"
    ls -lRh ${out_path}/*.img | awk '{print $9}'
}

# Execute the loop_make function
loop_make "${@}"
